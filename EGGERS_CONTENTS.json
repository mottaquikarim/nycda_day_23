{"home":{"content":"# Static Site Generator\n---\n\nWelcome to **Lecture 23**! Here is a brief class breakdown.\n\n## Learning Objectives\n1. Understand how to create a practical, easy to use piece of Node based software\n2. Learn about the command line interface\n\n## To Do Today\n\n* ### [Warmup](#warmup)\n* ### [Static Site Generator](#static-site-generator)","idx":0},"title":{"content":"Static Site Generator","idx":1},"desc":{"content":"How-to build useful Node software","idx":2},"warmup":{"content":"# Warmup\n\nLet's warm up by creating our project folder.\n\n## Exercise 1\n\nCreate new folder.\n\n```bash\nmkdir my-blog && cd my-blog\n```\n\nThen, inside of this folder, create **another** folder.\n\n```bash\nmkdir src && cd src\n```\n\nInitialize your project **inside** the **src** folder.\n\n```bash\nnpm init\n```\n\n**REMEMBER** you have to run thru a bunch of questions **npm** will ask you. You can fill out these fields or just hit enter over and over.\n\nCreate your project entry point.\n\n```bash\ntouch index.js\n```\n\nOpen your project up in Sublime Text and add a sample line of code. Run and test to ensure it's working\n\n```bash\nnode index.js\n```\n\n","idx":3},"static-site-generator":{"content":"# Static Site Generator\n\nToday we will implement a simple but functional static site generator that we can use to host our own personal blog.\n\n## Definition\n\nWe want to implement a static site generator that will, broadly speaking:\n\n1. Transform **.md** files (markdown files) into **html** code\n2. **Watch** a file directory containing all of our **.md** files for transformation\n3. Refer to a **config.json** file that points to the **file directory**\n4. Draws from a **template** html file for generation of the shell html code. \n\n## How It Works\n\nHere is how our generator will work:\n\n1. Our script will open up the **config.json** to get info.\n2. Our script will slurp all the files in the markdown files directory. (**QUESTION**: how will this work?)\n3. We refer to our **config.json** file to open up our **\"template\"** html file.\n4. For each file in the markdown files directory, we open it up as a promise.\n5. We convert the filecontent (which is in markdown) and convert it to html (**with** the template html file).\n6. We write a new .html file with the newly transformed HTML\n\n## File Structure\n\n```bash\n/my-blog\n----/src\n----/content\nconfig.js\n[^^^ these are static site specific]\n----/styles\n----/js\n*.html\n```\n\n## Methods\n\nImplement the following:\n\n### `fs.readdir` as promise\n\nOpen up the fs-promise.js file.\n\n```js\nconst fs = require('fs');\nconst mkdirp = require('mkdirp');\n    \nconst read = (filePath, encoding='utf8') => {\n\treturn new Promise((resolve, reject) => {\n\t\tfs.readFile(filePath, encoding, (err, fileContents) => {\n\t\t\tif (err) { reject(err); }\n\t\t\telse { resolve(fileContents); }\n\t\t});\n\t});\n};\n\nconst write = (filePath, data, encoding = 'utf8') => {\n\treturn new Promise((resolve, reject) => {\n\t\tfs.writeFile(filePath, data, encoding, (err) => {\n\t\t\tif (err) { reject(err); }\n\t\t\telse { resolve(true); }\n\t\t});\n\t});\n};\n\n\nmodule.exports = {\n\tfileRead: read,\n\tfileWrite: write,\n};\n```\n\n**Implement** a method called `fileReadDir` that emulates the [`fs.readdir`](https://nodejs.org/api/fs.html#fs_fs_readdir_path_options_callback) method.\n\n\n\n","idx":4},"__list__":["home","title","desc","warmup","static-site-generator"]}